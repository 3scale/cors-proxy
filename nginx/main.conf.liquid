daemon {{ daemon }};
master_process {{ master_process }};
worker_processes {{ worker_processes }};

{% if pid %}
pid {{ pid }};
{% endif %}

{% if error_log and log_level %}
error_log {{ error_log }} {{  log_level }};
{% endif %}

env DATABASE_URL;

events {
  worker_connections 1024;
}

http {

  underscores_in_headers on;

  lua_shared_dict whitelist 10m;
  lua_shared_dict prometheus_metrics 10M;

  lua_code_cache {{ lua_code_cache }};

  lua_package_path "{{ lua_path }};./src/?.lua;./src/?/init.lua;;";
  lua_package_cpath "{{ lua_cpath }};;";

  init_by_lua_block {
    require('cors-proxy'):init()
  }

  init_worker_by_lua_block {
    -- code to be executed after forking workers
  }

  log_by_lua_block {
    -- custom logging
  }

  upstream proxy {
    server 0.0.0.1:1;

    balancer_by_lua_block { require('cors-proxy'):upstream() }

    keepalive 1024;
  }

  server {
    listen {{ port }} default_server;

    set_by_lua_block $proxy_scheme { return ngx.var.scheme }
    set $proxy_path '';

    location / {

      rewrite_by_lua_block {
        require('cors-proxy'):rewrite()
      }
      
      access_by_lua_block {
        require('cors-proxy'):access()
      }

      header_filter_by_lua_block {
        require('cors-proxy'):header_filter()
      }

      proxy_http_version 1.1;
      proxy_ssl_server_name on;
      proxy_ssl_name $http_host;
      proxy_ssl_verify_depth 5;
      proxy_pass $proxy_scheme://proxy$proxy_path$is_args$args;
      proxy_set_header Connection "";
      proxy_set_header Host "$host";
    }
  }

  server {
    {% if metrics_port %}
      listen {{ metrics_port }};
      server_name metrics;
    {% else %}
      listen 9145 default_server;
    {% endif %}

    location /metrics {

      content_by_lua_block {
        require('cors-proxy'):metrics()
      }
    }

    location /nginx_status {
      internal;
      access_log off;
      stub_status;
    }
  }

  {{ sites_d }}
}
