daemon {{ daemon }};
master_process {{ master_process }};
worker_processes {{ worker_processes }};

env DATABASE_URL;

events {
  worker_connections 1024;
}

http {

  underscores_in_headers on;

  lua_shared_dict whitelist 10m;
  lua_shared_dict prometheus_metrics 10M;

  lua_code_cache {{ lua_code_cache }};

  lua_package_path "{{ lua_path }};;";
  lua_package_cpath "{{ lua_cpath }};;";

  init_by_lua_block {
    prometheus = require('nginx.prometheus').init("prometheus_metrics")
    require('cors-proxy'):init()

    metric_connections      = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})
    database_connection     = prometheus:gauge("cors_proxy_database_connection", "Database Connection State", {"state"})

  }

  init_worker_by_lua_block {
    -- code to be executed after forking workers
  }

  log_by_lua_block {
    -- custom logging
  }

  upstream proxy {
    server 0.0.0.1:1;

    balancer_by_lua_block { require('cors-proxy'):upstream() }

    keepalive 1024;
  }

  server {
    listen {{ port }} default_server;

    set_by_lua_block $proxy_scheme { return ngx.var.scheme }
    set $proxy_path '';

    location / {
      access_by_lua_block {
        require('cors-proxy'):access()
      }

      rewrite_by_lua_block {
        require('cors-proxy'):rewrite()
      }

      proxy_http_version 1.1;
      proxy_pass $proxy_scheme://proxy$proxy_path$is_args$args;
      proxy_set_header Connection "";
      proxy_set_header Host "$host";
    }
  }

  server {
    listen 9145;
    location /metrics {


      content_by_lua '
        local response = ngx.location.capture "/nginx_status"
        local select = select
        local find = string.find

        if response.status ~= 200 then
          ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE
          ngx.log(ngx.ERR, "Nginx Status Module is not responding and failing with the Status: ", response.status)
          ngx.exit(ngx.status)
        end

        local accepted, handled, total = select(3, find(response.body, [[accepts handled requests\n (%d*) (%d*) (%d*)]]))

        if ngx.var.connections_active ~= nil then
          metric_connections:set(ngx.var.connections_reading, {"reading"})
          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
          metric_connections:set(ngx.var.connections_writing, {"writing"})
          metric_connections:set(accepted, {"accepted"})
          metric_connections:set(handled, {"handled"})
          metric_connections:set(total, {"total"})
        end
        prometheus:collect()
      ';
    }

    location /nginx_status {
      internal;
      access_log off;
      stub_status;
    }

  }
}
